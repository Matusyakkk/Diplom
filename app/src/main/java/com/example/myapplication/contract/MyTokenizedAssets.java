package com.example.myapplication.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class MyTokenizedAssets extends Contract {
    public static final String BINARY = "608060405234801561000f575f5ffd5b50336040518060400160405280601181526020017f4d79546f6b656e697a65644173736574730000000000000000000000000000008152506040518060400160405280600381526020017f4d54410000000000000000000000000000000000000000000000000000000000815250815f908161008b9190610423565b50806001908161009b9190610423565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361010e575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101059190610531565b60405180910390fd5b61011d8161012360201b60201c565b5061054a565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061026157607f821691505b6020821081036102745761027361021d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261029b565b6102e0868361029b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61032461031f61031a846102f8565b610301565b6102f8565b9050919050565b5f819050919050565b61033d8361030a565b6103516103498261032b565b8484546102a7565b825550505050565b5f5f905090565b610368610359565b610373818484610334565b505050565b5b818110156103965761038b5f82610360565b600181019050610379565b5050565b601f8211156103db576103ac8161027a565b6103b58461028c565b810160208510156103c4578190505b6103d86103d08561028c565b830182610378565b50505b505050565b5f82821c905092915050565b5f6103fb5f19846008026103e0565b1980831691505092915050565b5f61041383836103ec565b9150826002028217905092915050565b61042c826101e6565b67ffffffffffffffff811115610445576104446101f0565b5b61044f825461024a565b61045a82828561039a565b5f60209050601f83116001811461048b575f8415610479578287015190505b6104838582610408565b8655506104ea565b601f1984166104998661027a565b5f5b828110156104c05784890151825560018201915060208501945060208101905061049b565b868310156104dd57848901516104d9601f8916826103ec565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61051b826104f2565b9050919050565b61052b81610511565b82525050565b5f6020820190506105445f830184610522565b92915050565b613da9806105575f395ff3fe608060405260043610610134575f3560e01c806370a08231116100aa578063a22cb4651161006e578063a22cb465146103e6578063b88d4fde1461040e578063c87b56dd14610436578063cf35bdd014610472578063e985e9c5146104b4578063f2fde38b146104f057610134565b806370a0823114610324578063715018a6146103605780638da5cb5b1461037657806395d89b41146103a05780639979ef45146103ca57610134565b806323b872dd116100fc57806323b872dd1461021e5780632acada4d146102465780632e27ec4a1461027057806342842e0e1461029857806343b78e19146102c05780636352211e146102e857610134565b806301ffc9a71461013857806306fdde031461017457806307bec66f1461019e578063081812fc146101ba578063095ea7b3146101f6575b5f5ffd5b348015610143575f5ffd5b5061015e60048036038101906101599190612b57565b610518565b60405161016b9190612b9c565b60405180910390f35b34801561017f575f5ffd5b50610188610578565b6040516101959190612c25565b60405180910390f35b6101b860048036038101906101b39190612c78565b610607565b005b3480156101c5575f5ffd5b506101e060048036038101906101db9190612c78565b61091e565b6040516101ed9190612ce2565b60405180910390f35b348015610201575f5ffd5b5061021c60048036038101906102179190612d25565b610939565b005b348015610229575f5ffd5b50610244600480360381019061023f9190612d63565b61094f565b005b348015610251575f5ffd5b5061025a610a4e565b6040516102679190612f6d565b60405180910390f35b34801561027b575f5ffd5b5061029660048036038101906102919190612f8d565b610c8f565b005b3480156102a3575f5ffd5b506102be60048036038101906102b99190612d63565b610ecd565b005b3480156102cb575f5ffd5b506102e660048036038101906102e19190613109565b610eec565b005b3480156102f3575f5ffd5b5061030e60048036038101906103099190612c78565b6110bf565b60405161031b9190612ce2565b60405180910390f35b34801561032f575f5ffd5b5061034a60048036038101906103459190613150565b6110d0565b604051610357919061318a565b60405180910390f35b34801561036b575f5ffd5b50610374611186565b005b348015610381575f5ffd5b5061038a611199565b6040516103979190612ce2565b60405180910390f35b3480156103ab575f5ffd5b506103b46111c1565b6040516103c19190612c25565b60405180910390f35b6103e460048036038101906103df9190612c78565b611251565b005b3480156103f1575f5ffd5b5061040c600480360381019061040791906131cd565b611581565b005b348015610419575f5ffd5b50610434600480360381019061042f91906132a9565b611597565b005b348015610441575f5ffd5b5061045c60048036038101906104579190612c78565b6115bc565b6040516104699190612c25565b60405180910390f35b34801561047d575f5ffd5b5061049860048036038101906104939190612c78565b6116c7565b6040516104ab9796959493929190613329565b60405180910390f35b3480156104bf575f5ffd5b506104da60048036038101906104d5919061339d565b6117c9565b6040516104e79190612b9c565b60405180910390f35b3480156104fb575f5ffd5b5061051660048036038101906105119190613150565b611857565b005b5f634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105715750610570826118db565b5b9050919050565b60605f805461058690613408565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290613408565b80156105fd5780601f106105d4576101008083540402835291602001916105fd565b820191905f5260205f20905b8154815290600101906020018083116105e057829003601f168201915b5050505050905090565b610610816119bc565b61064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064690613482565b60405180910390fd5b60095f8281526020019081526020015f206004015442106106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906134ea565b60405180910390fd5b60095f8281526020019081526020015f20600301543410156106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f390613552565b60405180910390fd5b5f60095f8381526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061073e8133846119fc565b3360095f8481526020019081526020015f206002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60095f8481526020019081526020015f20600401819055505f73ffffffffffffffffffffffffffffffffffffffff1660095f8481526020019081526020015f206006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461089b5760095f8381526020019081526020015f206006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60095f8581526020019081526020015f206005015490811502906040515f60405180830381858888f19350505050158015610899573d5f5f3e3d5ffd5b505b8073ffffffffffffffffffffffffffffffffffffffff166108fc3490811502906040515f60405180830381858888f193505050501580156108de573d5f5f3e3d5ffd5b507f03df89dfb876aa84df9da92f20f01a759db288978046b346c2e42daf1f5355ed82333460405161091293929190613570565b60405180910390a15050565b5f61092882611b64565b5061093282611bea565b9050919050565b61094b8282610946611c23565b611c2a565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109bf575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016109b69190612ce2565b60405180910390fd5b5f6109d283836109cd611c23565b611c3c565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a48578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610a3f939291906135a5565b60405180910390fd5b50505050565b60605f600a8054905090505f8167ffffffffffffffff811115610a7457610a73612fe5565b5b604051908082528060200260200182016040528015610aad57816020015b610a9a612a8e565b815260200190600190039081610a925790505b5090505f5f90505b82811015610c86575f600a8281548110610ad257610ad16135da565b5b905f5260205f200154905060095f8281526020019081526020015f206040518060e00160405290815f8201548152602001600182018054610b1290613408565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3e90613408565b8015610b895780601f10610b6057610100808354040283529160200191610b89565b820191905f5260205f20905b815481529060010190602001808311610b6c57829003601f168201915b50505050508152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152602001600682015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050838381518110610c6d57610c6c6135da565b5b6020026020010181905250508080600101915050610ab5565b50809250505090565b610c98836119bc565b610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90613482565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16610cf7846110bf565b73ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4490613677565b60405180910390fd5b5f60095f8581526020019081526020015f206004015414610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90613705565b60405180910390fd5b5f8111610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90613793565b60405180910390fd5b8160095f8581526020019081526020015f20600301819055508042610e0a91906137de565b60095f8581526020019081526020015f20600401819055505f60095f8581526020019081526020015f20600501819055505f60095f8581526020019081526020015f206006015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2e5edf05d6224ddf4d8a55cceef53e9da2cfafd54653b1f75cc8f3082964c6e6838383604051610ec093929190613811565b60405180910390a1505050565b610ee783838360405180602001604052805f815250611597565b505050565b610ef4611e47565b610efe6008611ece565b5f610f096008611ee2565b9050610f153382611eee565b610f1f8183611fe1565b6040518060e001604052808281526020018381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525060095f8381526020019081526020015f205f820151815f01556020820151816001019081610fac91906139e6565b506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600a81908060018154018082558091505060019003905f5260205f20015f90919091909150557fd795f81e396978efe4b953561251f092354cd8282d26b4c9ebe648f61b2a71cd8183336040516110b393929190613ab5565b60405180910390a15050565b5f6110c982611b64565b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611141575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016111389190612ce2565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b61118e611e47565b6111975f61203b565b565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546111d090613408565b80601f01602080910402602001604051908101604052809291908181526020018280546111fc90613408565b80156112475780601f1061121e57610100808354040283529160200191611247565b820191905f5260205f20905b81548152906001019060200180831161122a57829003601f168201915b5050505050905090565b61125a816119bc565b611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129090613482565b60405180910390fd5b60095f8281526020019081526020015f206004015442106112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e6906134ea565b60405180910390fd5b60095f8281526020019081526020015f20600501543411611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133c90613b61565b60405180910390fd5b60095f8281526020019081526020015f206002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd90613bc9565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1660095f8381526020019081526020015f206006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d85760095f8281526020019081526020015f206006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60095f8481526020019081526020015f206005015490811502906040515f60405180830381858888f193505050501580156114d6573d5f5f3e3d5ffd5b505b3460095f8381526020019081526020015f20600501819055503360095f8381526020019081526020015f206006015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c4781333460405161157693929190613570565b60405180910390a150565b61159361158c611c23565b83836120fe565b5050565b6115a284848461094f565b6115b66115ad611c23565b85858585612267565b50505050565b60606115c782611b64565b505f60065f8481526020019081526020015f2080546115e590613408565b80601f016020809104026020016040519081016040528092919081815260200182805461161190613408565b801561165c5780601f106116335761010080835404028352916020019161165c565b820191905f5260205f20905b81548152906001019060200180831161163f57829003601f168201915b505050505090505f61166c612413565b90505f8151036116805781925050506116c2565b5f825111156116b457808260405160200161169c929190613c21565b604051602081830303815290604052925050506116c2565b6116bd84612429565b925050505b919050565b6009602052805f5260405f205f91509050805f0154908060010180546116ec90613408565b80601f016020809104026020016040519081016040528092919081815260200182805461171890613408565b80156117635780601f1061173a57610100808354040283529160200191611763565b820191905f5260205f20905b81548152906001019060200180831161174657829003601f168201915b505050505090806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005015490806006015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b61185f611e47565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118cf575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016118c69190612ce2565b60405180910390fd5b6118d88161203b565b50565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119a557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119b557506119b48261248f565b5b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff166119dd836124f8565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a6c575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611a639190612ce2565b60405180910390fd5b5f611a7883835f611c3c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611aea57816040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ae1919061318a565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b5e578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401611b55939291906135a5565b60405180910390fd5b50505050565b5f5f611b6f836124f8565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611be157826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611bd8919061318a565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b611c378383836001612531565b505050565b5f5f611c47846124f8565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c8857611c878184866126f0565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d1357611cc75f855f5f612531565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d9257600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611e4f611c23565b73ffffffffffffffffffffffffffffffffffffffff16611e6d611199565b73ffffffffffffffffffffffffffffffffffffffff1614611ecc57611e90611c23565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611ec39190612ce2565b60405180910390fd5b565b6001815f015f828254019250508190555050565b5f815f01549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f5e575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611f559190612ce2565b60405180910390fd5b5f611f6a83835f611c3c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611fdc575f6040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611fd39190612ce2565b60405180910390fd5b505050565b8060065f8481526020019081526020015f209081611fff91906139e6565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161202f919061318a565b60405180910390a15050565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361216e57816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016121659190612ce2565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161225a9190612b9c565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b111561240c578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016122c59493929190613c96565b6020604051808303815f875af192505050801561230057506040513d601f19601f820116820180604052508101906122fd9190613cf4565b60015b612381573d805f811461232e576040519150601f19603f3d011682016040523d82523d5f602084013e612333565b606091505b505f81510361237957836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016123709190612ce2565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461240a57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016124019190612ce2565b60405180910390fd5b505b5050505050565b606060405180602001604052805f815250905090565b606061243482611b64565b505f61243e612413565b90505f81511161245c5760405180602001604052805f815250612487565b80612466846127b3565b604051602001612477929190613c21565b6040516020818303038152906040525b915050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061256957505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561269b575f61257884611b64565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156125e257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156125f557506125f381846117c9565b155b1561263757826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161262e9190612ce2565b60405180910390fd5b811561269957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6126fb83838361287d565b6127ae575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361276f57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612766919061318a565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016127a5929190613d1f565b60405180910390fd5b505050565b60605f60016127c18461293d565b0190505f8167ffffffffffffffff8111156127df576127de612fe5565b5b6040519080825280601f01601f1916602001820160405280156128115781602001600182028036833780820191505090505b5090505f82602001820190505b600115612872578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161286757612866613d46565b5b0494505f850361281e575b819350505050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561293457508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806128f557506128f484846117c9565b5b8061293357508273ffffffffffffffffffffffffffffffffffffffff1661291b83611bea565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612999577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161298f5761298e613d46565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129d6576d04ee2d6d415b85acef810000000083816129cc576129cb613d46565b5b0492506020810190505b662386f26fc100008310612a0557662386f26fc1000083816129fb576129fa613d46565b5b0492506010810190505b6305f5e1008310612a2e576305f5e1008381612a2457612a23613d46565b5b0492506008810190505b6127108310612a53576127108381612a4957612a48613d46565b5b0492506004810190505b60648310612a765760648381612a6c57612a6b613d46565b5b0492506002810190505b600a8310612a85576001810190505b80915050919050565b6040518060e001604052805f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612b3681612b02565b8114612b40575f5ffd5b50565b5f81359050612b5181612b2d565b92915050565b5f60208284031215612b6c57612b6b612afa565b5b5f612b7984828501612b43565b91505092915050565b5f8115159050919050565b612b9681612b82565b82525050565b5f602082019050612baf5f830184612b8d565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f612bf782612bb5565b612c018185612bbf565b9350612c11818560208601612bcf565b612c1a81612bdd565b840191505092915050565b5f6020820190508181035f830152612c3d8184612bed565b905092915050565b5f819050919050565b612c5781612c45565b8114612c61575f5ffd5b50565b5f81359050612c7281612c4e565b92915050565b5f60208284031215612c8d57612c8c612afa565b5b5f612c9a84828501612c64565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612ccc82612ca3565b9050919050565b612cdc81612cc2565b82525050565b5f602082019050612cf55f830184612cd3565b92915050565b612d0481612cc2565b8114612d0e575f5ffd5b50565b5f81359050612d1f81612cfb565b92915050565b5f5f60408385031215612d3b57612d3a612afa565b5b5f612d4885828601612d11565b9250506020612d5985828601612c64565b9150509250929050565b5f5f5f60608486031215612d7a57612d79612afa565b5b5f612d8786828701612d11565b9350506020612d9886828701612d11565b9250506040612da986828701612c64565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b612de581612c45565b82525050565b5f82825260208201905092915050565b5f612e0582612bb5565b612e0f8185612deb565b9350612e1f818560208601612bcf565b612e2881612bdd565b840191505092915050565b612e3c81612cc2565b82525050565b5f60e083015f830151612e575f860182612ddc565b5060208301518482036020860152612e6f8282612dfb565b9150506040830151612e846040860182612e33565b506060830151612e976060860182612ddc565b506080830151612eaa6080860182612ddc565b5060a0830151612ebd60a0860182612ddc565b5060c0830151612ed060c0860182612e33565b508091505092915050565b5f612ee68383612e42565b905092915050565b5f602082019050919050565b5f612f0482612db3565b612f0e8185612dbd565b935083602082028501612f2085612dcd565b805f5b85811015612f5b5784840389528151612f3c8582612edb565b9450612f4783612eee565b925060208a01995050600181019050612f23565b50829750879550505050505092915050565b5f6020820190508181035f830152612f858184612efa565b905092915050565b5f5f5f60608486031215612fa457612fa3612afa565b5b5f612fb186828701612c64565b9350506020612fc286828701612c64565b9250506040612fd386828701612c64565b9150509250925092565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61301b82612bdd565b810181811067ffffffffffffffff8211171561303a57613039612fe5565b5b80604052505050565b5f61304c612af1565b90506130588282613012565b919050565b5f67ffffffffffffffff82111561307757613076612fe5565b5b61308082612bdd565b9050602081019050919050565b828183375f83830152505050565b5f6130ad6130a88461305d565b613043565b9050828152602081018484840111156130c9576130c8612fe1565b5b6130d484828561308d565b509392505050565b5f82601f8301126130f0576130ef612fdd565b5b813561310084826020860161309b565b91505092915050565b5f6020828403121561311e5761311d612afa565b5b5f82013567ffffffffffffffff81111561313b5761313a612afe565b5b613147848285016130dc565b91505092915050565b5f6020828403121561316557613164612afa565b5b5f61317284828501612d11565b91505092915050565b61318481612c45565b82525050565b5f60208201905061319d5f83018461317b565b92915050565b6131ac81612b82565b81146131b6575f5ffd5b50565b5f813590506131c7816131a3565b92915050565b5f5f604083850312156131e3576131e2612afa565b5b5f6131f085828601612d11565b9250506020613201858286016131b9565b9150509250929050565b5f67ffffffffffffffff82111561322557613224612fe5565b5b61322e82612bdd565b9050602081019050919050565b5f61324d6132488461320b565b613043565b90508281526020810184848401111561326957613268612fe1565b5b61327484828561308d565b509392505050565b5f82601f8301126132905761328f612fdd565b5b81356132a084826020860161323b565b91505092915050565b5f5f5f5f608085870312156132c1576132c0612afa565b5b5f6132ce87828801612d11565b94505060206132df87828801612d11565b93505060406132f087828801612c64565b925050606085013567ffffffffffffffff81111561331157613310612afe565b5b61331d8782880161327c565b91505092959194509250565b5f60e08201905061333c5f83018a61317b565b818103602083015261334e8189612bed565b905061335d6040830188612cd3565b61336a606083018761317b565b613377608083018661317b565b61338460a083018561317b565b61339160c0830184612cd3565b98975050505050505050565b5f5f604083850312156133b3576133b2612afa565b5b5f6133c085828601612d11565b92505060206133d185828601612d11565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061341f57607f821691505b602082108103613432576134316133db565b5b50919050565b7f417373657420646f6573206e6f742065786973740000000000000000000000005f82015250565b5f61346c601483612bbf565b915061347782613438565b602082019050919050565b5f6020820190508181035f83015261349981613460565b9050919050565b7f41756374696f6e2068617320656e6465640000000000000000000000000000005f82015250565b5f6134d4601183612bbf565b91506134df826134a0565b602082019050919050565b5f6020820190508181035f830152613501816134c8565b9050919050565b7f496e73756666696369656e742066756e647320666f72206275796f75740000005f82015250565b5f61353c601d83612bbf565b915061354782613508565b602082019050919050565b5f6020820190508181035f83015261356981613530565b9050919050565b5f6060820190506135835f83018661317b565b6135906020830185612cd3565b61359d604083018461317b565b949350505050565b5f6060820190506135b85f830186612cd3565b6135c5602083018561317b565b6135d26040830184612cd3565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4f6e6c79206f776e65722063616e206c69737420617373657420666f722061755f8201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b5f613661602583612bbf565b915061366c82613607565b604082019050919050565b5f6020820190508181035f83015261368e81613655565b9050919050565b7f417373657420697320616c7265616479206c697374656420666f7220617563745f8201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b5f6136ef602383612bbf565b91506136fa82613695565b604082019050919050565b5f6020820190508181035f83015261371c816136e3565b9050919050565b7f41756374696f6e206475726174696f6e206d75737420626520677265617465725f8201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b5f61377d602783612bbf565b915061378882613723565b604082019050919050565b5f6020820190508181035f8301526137aa81613771565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6137e882612c45565b91506137f383612c45565b925082820190508082111561380b5761380a6137b1565b5b92915050565b5f6060820190506138245f83018661317b565b613831602083018561317b565b61383e604083018461317b565b949350505050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026138a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613867565b6138ac8683613867565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6138e76138e26138dd84612c45565b6138c4565b612c45565b9050919050565b5f819050919050565b613900836138cd565b61391461390c826138ee565b848454613873565b825550505050565b5f5f905090565b61392b61391c565b6139368184846138f7565b505050565b5b818110156139595761394e5f82613923565b60018101905061393c565b5050565b601f82111561399e5761396f81613846565b61397884613858565b81016020851015613987578190505b61399b61399385613858565b83018261393b565b50505b505050565b5f82821c905092915050565b5f6139be5f19846008026139a3565b1980831691505092915050565b5f6139d683836139af565b9150826002028217905092915050565b6139ef82612bb5565b67ffffffffffffffff811115613a0857613a07612fe5565b5b613a128254613408565b613a1d82828561395d565b5f60209050601f831160018114613a4e575f8415613a3c578287015190505b613a4685826139cb565b865550613aad565b601f198416613a5c86613846565b5f5b82811015613a8357848901518255600182019150602085019450602081019050613a5e565b86831015613aa05784890151613a9c601f8916826139af565b8355505b6001600288020188555050505b505050505050565b5f606082019050613ac85f83018661317b565b8181036020830152613ada8185612bed565b9050613ae96040830184612cd3565b949350505050565b7f426964206d75737420626520686967686572207468616e2063757272656e74205f8201527f6869676865737420626964000000000000000000000000000000000000000000602082015250565b5f613b4b602b83612bbf565b9150613b5682613af1565b604082019050919050565b5f6020820190508181035f830152613b7881613b3f565b9050919050565b7f4f776e65722063616e6e6f7420626964206f6e206f776e2061737365740000005f82015250565b5f613bb3601d83612bbf565b9150613bbe82613b7f565b602082019050919050565b5f6020820190508181035f830152613be081613ba7565b9050919050565b5f81905092915050565b5f613bfb82612bb5565b613c058185613be7565b9350613c15818560208601612bcf565b80840191505092915050565b5f613c2c8285613bf1565b9150613c388284613bf1565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f613c6882613c44565b613c728185613c4e565b9350613c82818560208601612bcf565b613c8b81612bdd565b840191505092915050565b5f608082019050613ca95f830187612cd3565b613cb66020830186612cd3565b613cc3604083018561317b565b8181036060830152613cd58184613c5e565b905095945050505050565b5f81519050613cee81612b2d565b92915050565b5f60208284031215613d0957613d08612afa565b5b5f613d1684828501613ce0565b91505092915050565b5f604082019050613d325f830185612cd3565b613d3f602083018461317b565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea26469706673582212208c833a34ff338e4d8eb00110264fed5f5f1c994ad01763b4f2360be9499ba61664736f6c634300081e0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ASSETS = "assets";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BUYOUT = "buyout";

    public static final String FUNC_GETALLASSETS = "getAllAssets";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LISTASSETFORAUCTION = "listAssetForAuction";

    public static final String FUNC_MINTASSET = "mintAsset";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PLACEBID = "placeBid";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ASSETBOUGHT_EVENT = new Event("AssetBought", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETLISTEDFORAUCTION_EVENT = new Event("AssetListedForAuction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETMINTED_EVENT = new Event("AssetMinted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BIDPLACED_EVENT = new Event("BidPlaced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected MyTokenizedAssets(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MyTokenizedAssets(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MyTokenizedAssets(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MyTokenizedAssets(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<AssetBoughtEventResponse> getAssetBoughtEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ASSETBOUGHT_EVENT, transactionReceipt);
        ArrayList<AssetBoughtEventResponse> responses = new ArrayList<AssetBoughtEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetBoughtEventResponse typedResponse = new AssetBoughtEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AssetBoughtEventResponse getAssetBoughtEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ASSETBOUGHT_EVENT, log);
        AssetBoughtEventResponse typedResponse = new AssetBoughtEventResponse();
        typedResponse.log = log;
        typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AssetBoughtEventResponse> assetBoughtEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAssetBoughtEventFromLog(log));
    }

    public Flowable<AssetBoughtEventResponse> assetBoughtEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETBOUGHT_EVENT));
        return assetBoughtEventFlowable(filter);
    }

    public static List<AssetListedForAuctionEventResponse> getAssetListedForAuctionEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ASSETLISTEDFORAUCTION_EVENT, transactionReceipt);
        ArrayList<AssetListedForAuctionEventResponse> responses = new ArrayList<AssetListedForAuctionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetListedForAuctionEventResponse typedResponse = new AssetListedForAuctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyoutPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.auctionDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AssetListedForAuctionEventResponse getAssetListedForAuctionEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ASSETLISTEDFORAUCTION_EVENT, log);
        AssetListedForAuctionEventResponse typedResponse = new AssetListedForAuctionEventResponse();
        typedResponse.log = log;
        typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.buyoutPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.auctionDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AssetListedForAuctionEventResponse> assetListedForAuctionEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAssetListedForAuctionEventFromLog(log));
    }

    public Flowable<AssetListedForAuctionEventResponse> assetListedForAuctionEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETLISTEDFORAUCTION_EVENT));
        return assetListedForAuctionEventFlowable(filter);
    }

    public static List<AssetMintedEventResponse> getAssetMintedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ASSETMINTED_EVENT, transactionReceipt);
        ArrayList<AssetMintedEventResponse> responses = new ArrayList<AssetMintedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetMintedEventResponse typedResponse = new AssetMintedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AssetMintedEventResponse getAssetMintedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ASSETMINTED_EVENT, log);
        AssetMintedEventResponse typedResponse = new AssetMintedEventResponse();
        typedResponse.log = log;
        typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.uri = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AssetMintedEventResponse> assetMintedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAssetMintedEventFromLog(log));
    }

    public Flowable<AssetMintedEventResponse> assetMintedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETMINTED_EVENT));
        return assetMintedEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<BidPlacedEventResponse> getBidPlacedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BIDPLACED_EVENT, transactionReceipt);
        ArrayList<BidPlacedEventResponse> responses = new ArrayList<BidPlacedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BidPlacedEventResponse typedResponse = new BidPlacedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BidPlacedEventResponse getBidPlacedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BIDPLACED_EVENT, log);
        BidPlacedEventResponse typedResponse = new BidPlacedEventResponse();
        typedResponse.log = log;
        typedResponse.assetId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<BidPlacedEventResponse> bidPlacedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBidPlacedEventFromLog(log));
    }

    public Flowable<BidPlacedEventResponse> bidPlacedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BIDPLACED_EVENT));
        return bidPlacedEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>> assets(
            BigInteger param0) {
        final Function function = new Function(FUNC_ASSETS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> buyout(BigInteger assetId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYOUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(assetId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<List> getAllAssets() {
        final Function function = new Function(FUNC_GETALLASSETS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Asset>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> listAssetForAuction(BigInteger assetId,
            BigInteger buyoutPrice, BigInteger auctionDuration) {
        final Function function = new Function(
                FUNC_LISTASSETFORAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(assetId), 
                new org.web3j.abi.datatypes.generated.Uint256(buyoutPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(auctionDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintAsset(String uri) {
        final Function function = new Function(
                FUNC_MINTASSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> placeBid(BigInteger assetId,
            BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PLACEBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(assetId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MyTokenizedAssets load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyTokenizedAssets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MyTokenizedAssets load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MyTokenizedAssets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MyTokenizedAssets load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MyTokenizedAssets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MyTokenizedAssets load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MyTokenizedAssets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MyTokenizedAssets> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyTokenizedAssets.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<MyTokenizedAssets> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MyTokenizedAssets.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<MyTokenizedAssets> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyTokenizedAssets.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<MyTokenizedAssets> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MyTokenizedAssets.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Asset extends DynamicStruct {
        public BigInteger assetId;

        public String metaDataUri;

        public String owner;

        public BigInteger buyoutPrice;

        public BigInteger auctionEndTime;

        public BigInteger highestBid;

        public String highestBidder;

        public Asset(BigInteger assetId, String metaDataUri, String owner, BigInteger buyoutPrice,
                BigInteger auctionEndTime, BigInteger highestBid, String highestBidder) {
            super(new org.web3j.abi.datatypes.generated.Uint256(assetId), 
                    new org.web3j.abi.datatypes.Utf8String(metaDataUri), 
                    new org.web3j.abi.datatypes.Address(160, owner), 
                    new org.web3j.abi.datatypes.generated.Uint256(buyoutPrice), 
                    new org.web3j.abi.datatypes.generated.Uint256(auctionEndTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(highestBid), 
                    new org.web3j.abi.datatypes.Address(160, highestBidder));
            this.assetId = assetId;
            this.metaDataUri = metaDataUri;
            this.owner = owner;
            this.buyoutPrice = buyoutPrice;
            this.auctionEndTime = auctionEndTime;
            this.highestBid = highestBid;
            this.highestBidder = highestBidder;
        }

        public Asset(Uint256 assetId, Utf8String metaDataUri, Address owner, Uint256 buyoutPrice,
                Uint256 auctionEndTime, Uint256 highestBid, Address highestBidder) {
            super(assetId, metaDataUri, owner, buyoutPrice, auctionEndTime, highestBid, highestBidder);
            this.assetId = assetId.getValue();
            this.metaDataUri = metaDataUri.getValue();
            this.owner = owner.getValue();
            this.buyoutPrice = buyoutPrice.getValue();
            this.auctionEndTime = auctionEndTime.getValue();
            this.highestBid = highestBid.getValue();
            this.highestBidder = highestBidder.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class AssetBoughtEventResponse extends BaseEventResponse {
        public BigInteger assetId;

        public String buyer;

        public BigInteger amount;
    }

    public static class AssetListedForAuctionEventResponse extends BaseEventResponse {
        public BigInteger assetId;

        public BigInteger buyoutPrice;

        public BigInteger auctionDuration;
    }

    public static class AssetMintedEventResponse extends BaseEventResponse {
        public BigInteger assetId;

        public String uri;

        public String owner;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class BidPlacedEventResponse extends BaseEventResponse {
        public BigInteger assetId;

        public String bidder;

        public BigInteger amount;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
